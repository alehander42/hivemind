#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'hivemind'

SYNTAXES_PATH = File.join(File.dirname(__FILE__), '..', 'syntaxes')

def astify(source, syntax)
  parser, refs = Hivemind::Syntax.generate_syntax(syntax)
  success, tree, _ = parser.parse(source, refs)
  tree
end

def syntax_file(f)
  File.read(File.join(SYNTAXES_PATH, "#{f}.syntax"))
end

if ARGV.length == 1
  filename = ARGV[0]
  source = File.read(filename)
  syntax_line, _, source = source.partition("\n")
  if !syntax_line.start_with? 'syntax: '
    puts "file doesn't specify a syntax"
    exit 1
  end
  syntax = syntax_file(syntax_line.partition(': ').last)
  tree = astify(source.lstrip, syntax)
  vm = Hivemind::VM.new(tree)
  result = vm.run Hivemind::Runtime::HivemindEnv
elsif ARGV.length == 4
  filename, second_syntax_name, save = ARGV[1..-1]
  source = File.read(filename)
  syntax_line, _, source = source.partition("\n")
  if !syntax_line.start_with? 'syntax: '
    puts "first line of file doesn't specify a syntax"
    exit 1
  end
  first  = syntax_file(syntax_line.partition(': ').last)
  second = syntax_file(second_syntax_name)
  tree = astify(source.lstrip, first)
  result = Hivemind::Renderer.new(tree, second).render
  File.write(save, "syntax: #{second_syntax_name}\n\n#{result}")
else
  puts <<-USAGE
    hivemind <filename>
      runs the file
    hivemind render <filename> <syntax> <new_filename>
      renders the source with <syntax>
  USAGE
end

